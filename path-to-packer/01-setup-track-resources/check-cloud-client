#!/bin/bash -l
#
# This script runs when the platform check the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#
set -euxo pipefail

source /root/www/hcp_credentials

declare -a hcp_variables=("HCP_ORGANIZATION_ID" "HCP_PROJECT_ID" "HCP_CLIENT_ID" "HCP_CLIENT_SECRET" "HCP_CLIENT_TOKEN")

for var_name in "${hcp_variables[@]}"; do

  var_value="$(printenv $var_name)"
  var_length=$(echo $var_value | wc -c)

  if [[ ! -v $var_name ]]; then
    fail-message "${var_name} does not exist. Please declare value for ${var_name} at /root/www/hcp_credentials."

  elif [[ -v $var_name ]] && [ "$var_value" == "None" ]; then
    fail-message "Value for ${var_name} is \"None\". Please declare value for ${var_name} at /root/www/hcp_credentials."

  elif [ "$var_length" -lt 30 ]; then
    fail-message "Variable ${var_name} declared but is too short. Please declare value for ${var_name} at /root/www/hcp_credentials."
  fi

done

declare -a tfc_variables=("TFE_ORG" "TFE_TOKEN" "TFE_WORKSPACE")

for var_name in "${tfc_variables[@]}"; do

  var_value="$(printenv $var_name)"
  var_length=$(echo $var_value | wc -c)

  if [[ ! -v $var_name ]]; then
    fail-message "${var_name} does not exist. Please declare value for ${var_name} at /root/www/hcp_credentials."

  elif [[ -v $var_name ]] && [ "$var_value" == "None" ]; then
    fail-message "Value for ${var_name} is \"None\". Please declare value for ${var_name} at /root/www/hcp_credentials."

  elif [ "$var_name" == "TFE_TOKEN" ] && [ "$var_length" -lt 30 ]; then
    fail-message "Variable ${var_name} declared but is too short. Please declare value for ${var_name} at /root/www/hcp_credentials."
  fi

done

exit 0

